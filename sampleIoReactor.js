const commandLineArgs = require('command-line-args')

var IoReactorService = require("io-event-reactor");
var EvaluatorUtil = require('io-event-reactor/ioReactor').EvaluatorUtil;
var util = require('util');
var uuid = require('node-uuid');
var os = require('os');
var fs = require('fs');
var mysql = require('mysql');

// the options we take via command line
const optionDefinitions = [
  { name: 'pathsToMonitor', type: String, multiple:true},
  { name: 'triggeringEvents', type: String, multiple:true},
  { name: 'triggeringRegex', type: String, multiple:true},
  { name: 'targetShellExecDir', type: String},
  { name: 'mysqlHost', type: String },
  { name: 'mysqlUser', type: String },
  { name: 'mysqlPw',   type: String },
  { name: 'mysqlDb',   type: String }
];

// parse the options
const options = commandLineArgs(optionDefinitions)

// our logger
var logger = function(severity, origin, message) {
    if (/*severity != 'trace' && */severity != 'verbose') {
        console.log(severity + ' ' + origin + ' ' + message);
    }
};

// error callback
var errorCallback = function(message,error) {
    console.log("ERROR-CALLBACK! " + message + ' ' + error);
};

// setup our tmpdir working space, shell-exec plugin will echo events
// into files in this location
var targetShellExecDir = options.targetShellExecDir;
fs.mkdir(targetShellExecDir, function(err) {
    if (err) {
        throw new Error("Error creating targetShellExecDir dir: " + err);
    }
});

var targetTmpDir = targetShellExecDir + "/" + uuid.v4();
fs.mkdir(targetTmpDir, function(err) {
    if (err) {
        throw new Error("Error creating temp dir: " + err);
    }
});

// setup our mysql tables to record events via the mysql plugin
var mysqlConnConfig = {
   host     : options.mysqlHost,
   user     : options.mysqlUser,
   password : options.mysqlPw,
   database : options.mysqlDb,
   multipleStatements: true
 };


 /**
 * Create both io_event and io_event2 tables for inserts
 * generated by sql template/generator configs below via mysql plugin
 */
 var mysqlConnection;
 try {
     mysqlConnection = mysql.createConnection(mysqlConnConfig);
     mysqlConnection.query('DROP TABLE IF EXISTS io_event;' +
                           'DROP TABLE IF EXISTS io_event2;' +
                           'CREATE TABLE io_event (`eventType` VARCHAR(256) NOT NULL, `fullPath` VARCHAR(256) NULL,`stats` VARCHAR(512) NULL);' +
                           'CREATE TABLE io_event2 (`eventType` VARCHAR(256) NOT NULL, `fullPath` VARCHAR(256) NULL,`stats` VARCHAR(512) NULL);',
         function(err, results) {
             if (err) {
                 throw new Error("Error dropping io_event table " + err);
             }
         });
    mysqlConnection.end();
 } catch(error) {
     throw new Error("Error initializing test database and io_event table: " + error);
 }

// windows/nix configs for shell-exec plugin
 var shellConfigs = {
     windows: {
         processCommand: 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe',
         processArgs: ['-Command', '-'],
         commandTemplates: [
             '"{{{ioEvent.eventType}}}" | Out-File -FilePath '+targetTmpDir+'/{{ioEvent.uuid}}'
         ],
         commandGenerator: function(ioEvent) {
           return [('"'+ioEvent.eventType+'" | Out-File -FilePath '+targetTmpDir+'/'+ioEvent.uuid)];
         }
     },
     nix: {
         processCommand: '/bin/bash',
         processArgs: ['-s'],
         commandTemplates: [
             'echo "{{{ioEvent.eventType}}}" > '+targetTmpDir+'/{{ioEvent.uuid}}'
         ],
         commandGenerator: function(ioEvent) {
           return [('echo "'+ioEvent.eventType+'" > '+targetTmpDir+'/gen_'+ioEvent.uuid)];
         }
     }
 };


// are we windows?
var isWin = /^win/.test(process.platform);

// chose the right config based on platform
var shellConfig = (isWin ? shellConfigs['windows'] : shellConfigs['nix']);



// IoReactorService configuration
var config = {

  logFunction: logger,
  errorCallback: errorCallback,

  ioReactors: [

        {
            id: "ioReactor-test-instance1",

            monitor: {
                plugin: "io-event-reactor-plugin-chokidar",
                config: {
                    paths: options.pathsToMonitor,
                    options: {
                        alwaysStat: false,
                        awaitWriteFinish: {
                            stabilityThreshold: 200,
                            pollInterval: 100
                        },
                        ignoreInitial:true
                    }
                }
            },

            evaluators: [
                {
                    evaluator: EvaluatorUtil.regex(options.triggeringEvents,options.triggeringRegex,'ig'),
                    reactors: ['code1','logger1','shellExec1','mysql1']
                }
            ],

            reactors: [

                { id: "code1",
                  plugin: "./default_plugins/code/codeReactorPlugin",
                  config: {
                      codeFunction: function(ioEvent) {
                          return new Promise(function(resolve,reject){
                              var dateFormat = require('dateformat');
                              ioEvent.context.timestamp = dateFormat(new Date(), "yyyymmdd_hhMMssL");
                              resolve(true);
                          });
                      }
                  }
                },

                { id: "logger1",
                  plugin: "./default_plugins/logger/loggerReactorPlugin" },

                { id: "shellExec1",
                  plugin: "io-event-reactor-plugin-shell-exec",
                  config: {
                      statefulProcessCommandProxy: {
                          name: "ioReactor-test1-shell-exec",
                          max: 2,
                          min: 1,
                          idleTimeoutMS: 120000,
                          logFunction: logger,
                          processCommand: shellConfig.processCommand,
                          processArgs:  shellConfig.processArgs,
                          processRetainMaxCmdHistory : 10,
                          processCwd : './',
                          validateFunction: function(processProxy) {
                              return processProxy.isValid();
                          }
                      },
                      commandTemplates: shellConfig.commandTemplates,
                      commandGenerator: shellConfig.commandGenerator
                      }
                },

                { id: "mysql1",
                  plugin: "io-event-reactor-plugin-mysql",
                  config: {
                        poolConfig : mysqlConnConfig,

                        sqlTemplates: [
                            'INSERT INTO io_event (eventType,fullPath,stats) VALUES("{{{ioEvent.eventType}}}","{{{ioEvent.fullPath}}}","{{{ioEvent.optionalFsStats}}}")'
                        ],

                        sqlGenerator: function(ioEvent) {
                            return [('INSERT INTO io_event2 (eventType,fullPath,stats) VALUES("'+ioEvent.eventType+'","'+ioEvent.fullPath+'","'+(ioEvent.optionalFsStats ? ioEvent.optionalFsStats.size : '?') +'")')];
                        },
                    }
                }
            ]

        }

   ]
};


var reactor = new IoReactorService(config);
